"""
    Test de la classe Sound
"""

import unittest
import pickle
from mcs_dtw import ROOT_PATH
from mcs_dtw.sound import Sound

SOUNDS = [
    Sound(ROOT_PATH + "/corpus/dronevolant_bruite/M02_avance.wav"),
    pickle.loads(
        b'\x80\x03cmcs_dtw.sound\nSound\nq\x00)\x81q\x01}q\x02(X\x0c\x00\x00\x00_Sound__pathq\x03X\x8c\x00\x00\x00/Users/Kevin/Documents/MCS/MCS_DTW/venv/lib/python3.7/site-packages/mcs_dtw-0.1.0-py3.7.egg/mcs_dtw/corpus/dronevolant_bruite/M02_avance.wavq\x04X\x10\x00\x00\x00_Sound__locuteurq\x05X\x03\x00\x00\x00M02q\x06X\r\x00\x00\x00_Sound__genreq\x07X\x01\x00\x00\x00Mq\x08X\r\x00\x00\x00_Sound__ordreq\tX\x06\x00\x00\x00avanceq\nX\x0e\x00\x00\x00_Sound__bruiteq\x0b\x88X\x0c\x00\x00\x00_Sound__mfccq\x0ccnumpy.core.multiarray\n_reconstruct\nq\rcnumpy\nndarray\nq\x0eK\x00\x85q\x0fC\x01bq\x10\x87q\x11Rq\x12(K\x01K\x10K\x0c\x86q\x13cnumpy\ndtype\nq\x14X\x02\x00\x00\x00f4q\x15K\x00K\x01\x87q\x16Rq\x17(K\x03X\x01\x00\x00\x00<q\x18NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x19b\x89B\x00\x03\x00\x00I%d\xc32\xf0NB\x94Ps\xc2Z\xdc\x8bB\xc0d\x8a\xc2\xe4\x004AG\xf3\xb3\xc1$\xe2"\xc1H\xb0S\xbeE\xd4\xb5\xc0Q\xa3\x18\xc1\x8f\x92(\xc1w\xdd\r\xc3:V\xfcB\x88+\xd7\xc2\x0c\xfc\xe4A\xa0\xbe\xbb\xc2\xa6\x98=A\x0f2\xb0\xc1T\xc0\x06\xc1\xe9\x85\xb5\xc02[c\xc1\x9e\xc4\x9c\xc0\x1c\xbaq\xc1C\xef\xf6\xc2\x0e\xaf\tCX?\xe7\xc2\xa5\xa7\xb8APH\xbf\xc2:\xdb\x81@\xaa\xb8\xec\xc1&\xce9\xc1\x1d\xcc\xcd\xc0\xd2(L\xc1\xba\xa7\x03\xbf\xb3\x02*\xc1\xed\\3\xc3\x84\xd5\xd8B\x0e\x90\xb0\xc2\xf8\x064B\xcb|\xbb\xc2\x9a&\x83@\xf5+\xd0\xc1\xb8\xa7\x8f\xc11\xb9\x8b\xc1r\xcf\xd0\xc1\xc0J\x1d\xc1\x00=\xbb\xc0#/\x0c\xc3(\xe2\xfbB\n/\xce\xc2V\x7f\x03Bi=\xc8\xc22\xc4(@.\xd1\xea\xc1r\xca\x85\xc1\xd4\x82\x85\xc1\xae\xb4\xd9\xc1\x1a\xb7\x83\xc1[\xf3#\xc1B\'\x1e\xc3tq\xd7BH \xd7\xc2^\xd6$B\xe3\xec\xc2\xc2\xc1\x02H\xc0d\x1d\xe7\xc1\xb6\xfc^\xc1\xbdL\xfc\xc0~\xf7\x9a\xc1\xbb\x06\xa4\xc1\xc2c\x9a\xc1&\xd2(\xc3\xe4\r\xdbB\xd4\xa6\xb2\xc2\xb40<B\xbe9\xc1\xc2\xe4#\xe8>|4\xe4\xc1\xeaZ\xb0\xc0\x18\xba[\xbf\xd7\xda\xab\xc1Pe\xa3\xc1_\x13\x96\xc1j\xe0B\xc3\x0b\xd0\xc4B\xad\xcbv\xc2\xf2\xdb\x91BH\x1b\xb8\xc28\xad\x93?\xda\xb5\xca\xc1\x9c]5\xc0\xc82\x93=\xec\xdb\xb2\xc1\xd4\x8b\xad\xc1\x14|\x9d\xc18\x12Z\xc3f\x05WBNM\x8d\xc2F\x1c\x9dB\x96\xe3\xbb\xc2\xe2\x9ftA&\xfb\xf8\xc1\\\xb9\xba\xc0\x98p\xe4\xbf\xca\xaeo\xc1\xa0\xe6\n\xc1i\xf2\xae\xc1p\xbfZ\xc3\x03qBB\xdaM\x8d\xc2P\xe0\xa9B\x82\xea\xb5\xc2tg\x91A\xf6\xf9\xed\xc1\x9d\'\x14\xc1\xf4\xccZ\xc0\xdc\x87s\xc1\x00\x83\x16\xc1\xa8-\x96\xc1\xe0\xf7a\xc3\x1c\x9fIB\xb0\xb4\x8c\xc2\xc6\xe6\xa6B\xe6\xd2\xa9\xc2=\x07\x98A\xda\x7f\xef\xc1\xa9)!\xc1\x93cd\xc0\x065\x80\xc1\x84\xe5\xee\xc02\xbb\x88\xc1oLd\xc3f\xca_B\xa5\xce\x99\xc2\xbe\xf7\xa2B\n\'\xa0\xc2\xe2\x0fhA\x82\x82\xc8\xc1\xb5SF\xc1\xfb@"\xc0\xfa\\{\xc1X,\xc8\xc0l\xdd\x0c\xc1l\x01n\xc3^lqB#k\x8f\xc2\x13\xc7\xa0B\x84\x94\x8b\xc2t\xd4\xa4A\xd8\xe9\xc4\xc1\xf0\xden\xc1\xce~\xd1?P\xd8\xa7\xc0\x17\x17\xf1\xbf\x00\x9e\x19\xc1\xd9\xeaf\xc3\xecA\x86Bvo\x8f\xc2\xf6\xca\x9bB\xfe\xc2\x98\xc2\xdewrA\xd2\xf2\x93\xc1\x8a`\x1c\xc1\xd3f\x8a>\x9c\xff\xb1\xc0\x83du\xc0@\xeea\xc1\x1axh\xc3K;\x82B\xe5+\x92\xc2(\xee\x92B\xd4d\xa1\xc2\x12\xa2$A\'\xad\xd4\xc1\x9cUi\xc1\x12\x1f\x8e\xc0 \xb8%\xc1F5\xb9\xc0v\xaed\xc1x\x82f\xc3\xe6\x91\x84B\xb4\xef\x87\xc2f\'\xa4B\x8c\xb4\x95\xc2\x9c\xe2:A\xac\xc6\xb3\xc1x\xc0\xd1\xc0\x8c\x96l>\x0e\xde\xb3\xc0\xaak&\xc0\xb4\x868\xc1q\x1atq\x1bbub.')
]


class TestSound(unittest.TestCase):
    """
        Test de la classe Sound
    """

    def test_get_locuteur(self):
        """
            Vérifier si le son créé a bien le bon locuteur
        """
        for sound in SOUNDS:
            self.assertEqual(sound.get_locuteur(), "M02")

    def test_get_path(self):
        """
            Vérifier si le son créé a bien le bon path
        """
        for sound in SOUNDS:
            self.assertTrue(
                "/corpus/dronevolant_bruite/M02_avance.wav" in sound.get_path())

    def test_get_genre(self):
        """
            Vérifier si le son créé a bien le bon genre (M ou F)
        """
        for sound in SOUNDS:
            self.assertEqual(sound.get_genre(), 'M')

    def test_get_ordre(self):
        """
            Vérifier si le son créé a bien le bon ordre
        """
        for sound in SOUNDS:
            self.assertEqual(sound.get_ordre(), "avance")

    def test_is_bruite(self):
        """
            Vérifier si le son créé est bruité ou non
        """
        for sound in SOUNDS:
            self.assertEqual(sound.is_bruite(), True)

    def test_get_mfcc(self):
        """
            Vérifier si la matrice mfcc est bien construite
            Notamment si elle bien composée de n vecteurs de longueur 12 (pas l'inverse)
        """
        for sound in SOUNDS:
            mfcc = sound.get_mfcc()
            self.assertEqual(len(mfcc[0]), 12)
            self.assertEqual(mfcc.shape, (16, 12))
            self.assertAlmostEqual(mfcc[0][0], -228.14565, places=5)


if __name__ == '__main__':
    unittest.main()
